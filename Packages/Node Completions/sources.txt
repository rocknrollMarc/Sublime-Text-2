# async
async.each(arr, iterator, callback)
async.eachSeries(arr, iterator, callback)
async.eachLimit(arr, limit, iterator, callback)
async.map(arr, iterator, callback)
async.mapSeries(arr, iterator, callback)
async.mapLimit(arr, limit, iterator, callback)
async.filter(arr, iterator, callback)
async.filterSeries(arr, iterator, callback)
async.reject(arr, iterator, callback)
async.rejectSeries(arr, iterator, callback)
async.reduce(arr, memo, iterator, callback)
async.reduceRight(arr, memo, iterator, callback)
async.detect(arr, iterator, callback)
async.detectSeries(arr, iterator, callback)
async.sortBy(arr, iterator, callback)
async.some(arr, iterator, callback)
async.every(arr, iterator, callback)
async.concat(arr, iterator, callback)
async.concatSeries(arr, iterator, callback)
async.series(tasks, [callback])
async.parallel(tasks, [callback])
async.parallelLimit(tasks, limit, [callback])
async.whilst(test, fn, callback)
async.doWhilst(fn, test, callback)
async.until(test, fn, callback)
async.doUntil(fn, test, callback)
async.forever(fn, callback)
async.waterfall(tasks, [callback])
async.compose(fn1, fn2...)
async.applyEach(fns, args..., callback)
async.applyEachSeries(arr, iterator, callback)
async.queue(worker, concurrency)
async.cargo(worker, [payload])
async.auto(tasks, [callback])
async.iterator(tasks)
async.apply(function, arguments..)
async.nextTick(callback)
async.times(n, callback)
async.timesSeries(n, callback)
async.memoize(fn, [hasher])
async.unmemoize(fn)
async.log(function, arguments)
async.dir(function, arguments)
async.noConflict()
# underscore
_.each(list, iterator, [context])
_.map(list, iterator, [context])
_.reduce(list, iterator, memo, [context])
_.reduceRight(list, iterator, memo, [context])
_.find(list, predicate, [context])
_.filter(list, predicate, [context])
_.where(list, properties)
_.findWhere(list, properties)
_.reject(list, predicate, [context])
_.every(list, [predicate], [context])
_.some(list, [predicate], [context])
_.contains(list, value)
_.invoke(list, methodName, *arguments)
_.pluck(list, propertyName)
_.max(list, [iterator], [context])
_.min(list, [iterator], [context])
_.sortBy(list, iterator, [context])
_.groupBy(list, iterator, [context])
_.indexBy(list, iterator, [context])
_.countBy(list, iterator, [context])
_.shuffle(list)
_.sample(list, [n])
_.toArray(list)
_.size(list)
_.first(array, [n])
_.initial(array, [n])
_.last(array, [n])
_.rest(array, [index])
_.compact(array)
_.flatten(array, [shallow])
_.without(array, *values)
_.partition(array, predicate)
_.union(*arrays)
_.intersection(*arrays)
_.difference(array, *others)
_.uniq(array, [isSorted], [iterator])
_.zip(*arrays)
_.object(list, [values])
_.indexOf(array, value, [isSorted])
_.lastIndexOf(array, value, [fromIndex])
_.sortedIndex(list, value, [iterator], [context])
_.range([start], stop, [step])
_.bind(function, object, *arguments)
_.bindAll(object, *methodNames)
_.partial(function, *arguments)
_.memoize(function, [hashFunction])
_.delay(function, wait, *arguments)
_.defer(function, *arguments)
_.throttle(function, wait, [options])
_.debounce(function, wait, [immediate])
_.once(function)
_.after(count, function)
_.now()
_.wrap(function, wrapper)
_.compose(*functions)
_.keys(object)
_.values(object)
_.pairs(object)
_.invert(object)
_.functions(object)
_.extend(destination, *sources)
_.pick(object, *keys)
_.omit(object, *keys)
_.defaults(object, *defaults)
_.clone(object)
_.tap(object, interceptor)
_.has(object, key)
_.property(key)
_.matches(attrs)
_.isEqual(object, other)
_.isEmpty(object)
_.isElement(object)
_.isArray(object)
_.isObject(value)
_.isArguments(object)
_.isFunction(object)
_.isString(object)
_.isNumber(object)
_.isFinite(object)
_.isBoolean(object)
_.isDate(object)
_.isRegExp(object)
_.isNaN(object)
_.isNull(object)
_.isUndefined(value)
_.noConflict()
_.identity(value)
_.constant(value)
_.times(n, iterator, [context])
_.random(min, max)
_.mixin(object)
_.uniqueId([prefix])
_.escape(string)
_.unescape(string)
_.result(object, property)
_.template(templateString, [data], [settings])
_.chain(obj)
# lodash
_.compact(array)
_.difference(array, [values])
_.findIndex(array, [callback=identity], [thisArg])
_.findLastIndex(array, [callback=identity], [thisArg])
_.first(array, [callback], [thisArg])
_.flatten(array, [isShallow=false], [callback=identity], [thisArg])
_.indexOf(array, value, [fromIndex=0])
_.initial(array, [callback=1], [thisArg])
_.intersection([array])
_.last(array, [callback], [thisArg])
_.lastIndexOf(array, value)
_.pull(array, [value])
_.range([start=0], end, [step=1])
_.remove(array, [callback=identity], [thisArg])
_.rest(array, [callback=1], [thisArg])
_.sortedIndex(array, value, [callback=identity], [thisArg])
_.union([array])
_.uniq(array, [isSorted=false], [callback=identity], [thisArg])
_.without(array, [value])
_.xor([array])
_.zip([array])
_.zipObject(keys, [values=[]])
_.chain(value)
_.tap(value, interceptor)
_.prototype.chain()
_.prototype.toString()
_.prototype.valueOf()
_.at(collection, [index])
_.contains(collection, target, [fromIndex=0])
_.countBy(collection, [callback=identity], [thisArg])
_.every(collection, [callback=identity], [thisArg])
_.filter(collection, [callback=identity], [thisArg])
_.find(collection, [callback=identity], [thisArg])
_.findLast(collection, [callback=identity], [thisArg])
_.forEach(collection, [callback=identity], [thisArg])
_.forEachRight(collection, [callback=identity], [thisArg])
_.groupBy(collection, [callback=identity], [thisArg])
_.indexBy(collection, [callback=identity], [thisArg])
_.invoke(collection, methodName, [arg])
_.map(collection, [callback=identity], [thisArg])
_.max(collection, [callback=identity], [thisArg])
_.min(collection, [callback=identity], [thisArg])
_.pluck(collection, property)
_.reduce(collection, [callback=identity], [accumulator], [thisArg])
_.reduceRight(collection, [callback=identity], [accumulator], [thisArg])
_.reject(collection, [callback=identity], [thisArg])
_.sample(collection, [n])
_.shuffle(collection)
_.size(collection)
_.some(collection, [callback=identity], [thisArg])
_.sortBy(collection, [callback=identity], [thisArg])
_.toArray(collection)
_.where(collection, props)
_.after(n, func)
_.bind(func, [thisArg], [arg])
_.bindAll(object, [methodName])
_.bindKey(object, key, [arg])
_.compose([func])
_.curry(func)
_.debounce(func, wait, [options])
_.defer(func, [arg])
_.delay(func, wait, [arg])
_.memoize(func, [resolver])
_.once(func)
_.partial(func, [arg])
_.partialRight(func, [arg])
_.throttle(func, wait, [options])
_.wrap(value, wrapper)
_.assign(object, [source], [callback], [thisArg])
_.clone(value, [isDeep=false], [callback], [thisArg])
_.cloneDeep(value, [callback], [thisArg])
_.create(prototype, [properties])
_.defaults(object, [source])
_.findKey(object, [callback=identity], [thisArg])
_.findLastKey(object, [callback=identity], [thisArg])
_.forIn(object, [callback=identity], [thisArg])
_.forInRight(object, [callback=identity], [thisArg])
_.forOwn(object, [callback=identity], [thisArg])
_.forOwnRight(object, [callback=identity], [thisArg])
_.functions(object)
_.has(object, key)
_.invert(object)
_.isArguments(value)
_.isArray(value)
_.isBoolean(value)
_.isDate(value)
_.isElement(value)
_.isEmpty(value)
_.isEqual(a, b, [callback], [thisArg])
_.isFinite(value)
_.isFunction(value)
_.isNaN(value)
_.isNull(value)
_.isNumber(value)
_.isObject(value)
_.isPlainObject(value)
_.isRegExp(value)
_.isString(value)
_.isUndefined(value)
_.keys(object)
_.mapValues(object, [callback=identity], [thisArg])
_.merge(object, [source], [callback], [thisArg])
_.omit(object, [callback], [thisArg])
_.pairs(object)
_.pick(object, [callback], [thisArg])
_.transform(object, [callback=identity], [accumulator], [thisArg])
_.values(object)
_.now
_.constant(value)
_.createCallback([func=identity], [thisArg], [argCount])
_.escape(string)
_.identity(value)
_.mixin([object=lodash], source, [options])
_.noConflict()
_.noop()
_.parseInt(value, [radix])
_.property(key)
_.random([min=0], [max=1], [floating=false])
_.result(object, key)
_.runInContext([context=root])
_.template(text, data, [options])
_.times(n, callback, [thisArg])
_.unescape(string)
_.uniqueId([prefix])
_.templateSettings.imports._
_.VERSION
_.support
_.support.argsClass
_.support.argsObject
_.support.enumErrorProps
_.support.enumPrototypes
_.support.funcDecomp
_.support.funcNames
_.support.nonEnumArgs
_.support.nonEnumShadows
_.support.ownLast
_.support.spliceObjects
_.support.unindexedChars
_.templateSettings
_.templateSettings.escape
_.templateSettings.evaluate
_.templateSettings.interpolate
_.templateSettings.variable
_.templateSettings.imports
# assert
assert.fail(actual, expected, message, operator)
assert(value, message), assert.ok(value, [message])
assert.equal(actual, expected, [message])
assert.notEqual(actual, expected, [message])
assert.deepEqual(actual, expected, [message])
assert.notDeepEqual(actual, expected, [message])
assert.strictEqual(actual, expected, [message])
assert.notStrictEqual(actual, expected, [message])
assert.throws(block, [error], [message])
assert.doesNotThrow(block, [message])
assert.ifError(value)
# buffer
Buffer(size)
Buffer(array)
Buffer(str, [encoding])
buf.write(string, [offset], [length], [encoding])
buf.toString([encoding], [start], [end])
buf.toJSON()
buf[index]
buf.length
buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])
buf.slice([start], [end])
buf.readUInt8(offset, [noAssert])
buf.readUInt16LE(offset, [noAssert])
buf.readUInt16BE(offset, [noAssert])
buf.readUInt32LE(offset, [noAssert])
buf.readUInt32BE(offset, [noAssert])
buf.readInt8(offset, [noAssert])
buf.readInt16LE(offset, [noAssert])
buf.readInt16BE(offset, [noAssert])
buf.readInt32LE(offset, [noAssert])
buf.readInt32BE(offset, [noAssert])
buf.readFloatLE(offset, [noAssert])
buf.readFloatBE(offset, [noAssert])
buf.readDoubleLE(offset, [noAssert])
buf.readDoubleBE(offset, [noAssert])
buf.writeUInt8(value, offset, [noAssert])
buf.writeUInt16LE(value, offset, [noAssert])
buf.writeUInt16BE(value, offset, [noAssert])
buf.writeUInt32LE(value, offset, [noAssert])
buf.writeUInt32BE(value, offset, [noAssert])
buf.writeInt8(value, offset, [noAssert])
buf.writeInt16LE(value, offset, [noAssert])
buf.writeInt16BE(value, offset, [noAssert])
buf.writeInt32LE(value, offset, [noAssert])
buf.writeInt32BE(value, offset, [noAssert])
buf.writeFloatLE(value, offset, [noAssert])
buf.writeFloatBE(value, offset, [noAssert])
buf.writeDoubleLE(value, offset, [noAssert])
buf.writeDoubleBE(value, offset, [noAssert])
buf.fill(value, [offset], [end])
buffer.INSPECT_MAX_BYTES
# child
child.stdout
child.stderr
child.pid
child.connected
child.kill([signal])
child.send(message, [sendHandle])
child.disconnect()
child_process.spawn(command, [args], [options])
child_process.exec(command, [options], callback)
child_process.execFile(file, [args], [options], [callback])
child_process.fork(modulePath, [args], [options])
# console
console.log([data], [...])
console.info([data], [...])
console.error([data], [...])
console.warn([data], [...])
console.dir(obj)
console.time(label)
console.timeEnd(label)
console.trace(label)
console.assert(expression, [message])
# cluster
cluster.settings
cluster.isMaster
cluster.isWorker
cluster.setupMaster([settings])
cluster.fork([env])
cluster.disconnect([callback])
cluster.worker
cluster.workers
worker.id
worker.process
worker.suicide
worker.send(message, [sendHandle])
worker.kill([signal='SIGTERM'])
worker.disconnect()
# crypto
crypto.getCiphers()
crypto.getHashes()
crypto.createCredentials(details)
crypto.createHash(algorithm)
hash.update(data, [input_encoding])
hash.digest([encoding])
crypto.createHmac(algorithm, key)
hmac.update(data)
hmac.digest([encoding])
crypto.createCipher(algorithm, password)
crypto.createCipheriv(algorithm, key, iv)
cipher.update(data, [input_encoding], [output_encoding])
cipher.final([output_encoding])
cipher.setAutoPadding(auto_padding=true)
crypto.createDecipher(algorithm, password)
crypto.createDecipheriv(algorithm, key, iv)
decipher.update(data, [input_encoding], [output_encoding])
decipher.final([output_encoding])
decipher.setAutoPadding(auto_padding=true)
crypto.createSign(algorithm)
sign.update(data)
sign.sign(private_key, [output_format])
crypto.createVerify(algorithm)
verifier.update(data)
verifier.verify(object, signature, [signature_format])
crypto.createDiffieHellman(prime_length)
crypto.createDiffieHellman(prime, [encoding])
diffieHellman.generateKeys([encoding])
diffieHellman.computeSecret(other_public_key, [input_encoding], [output_encoding])
diffieHellman.getPrime([encoding])
diffieHellman.getGenerator([encoding])
diffieHellman.getPublicKey([encoding])
diffieHellman.getPrivateKey([encoding])
diffieHellman.setPublicKey(public_key, [encoding])
diffieHellman.setPrivateKey(private_key, [encoding])
crypto.getDiffieHellman(group_name)
crypto.pbkdf2(password, salt, iterations, keylen, callback)
crypto.pbkdf2Sync(password, salt, iterations, keylen)
crypto.randomBytes(size, [callback])
crypto.pseudoRandomBytes(size, [callback])
crypto.DEFAULT_ENCODING
# decoder
decoder.write(buffer)
decoder.end()
# domain
domain.create()
domain.run(fn)
domain.members
domain.add(emitter)
domain.remove(emitter)
domain.bind(callback)
domain.intercept(callback)
domain.enter()
domain.exit()
domain.dispose()
# dns
dns.lookup(domain, [family], callback)
dns.resolve(domain, [rrtype], callback)
dns.resolve4(domain, callback)
dns.resolve6(domain, callback)
dns.resolveMx(domain, callback)
dns.resolveTxt(domain, callback)
dns.resolveSrv(domain, callback)
dns.resolveNs(domain, callback)
dns.resolveCname(domain, callback)
dns.reverse(ip, callback)
# event
emitter.addListener(event, listener)
emitter.on(event, listener)
emitter.once(event, listener)
emitter.removeListener(event, listener)
emitter.removeAllListeners([event])
emitter.setMaxListeners(n)
emitter.listeners(event)
emitter.emit(event, [arg1], [arg2], [...])
# http
http.STATUS_CODES
http.createServer([requestListener])
http.createClient([port], [host])
server.listen(port, [hostname], [backlog], [callback])
server.listen(path, [callback])
server.listen(handle, [callback])
server.close([callback])
server.maxHeadersCount
server.setTimeout(msecs, callback)
server.timeout
response.writeContinue()
response.writeHead(statusCode, [reasonPhrase], [headers])
response.setTimeout(msecs, callback)
response.statusCode
response.setHeader(name, value)
response.headersSent
response.sendDate
response.getHeader(name)
response.removeHeader(name)
response.write(chunk, [encoding])
response.addTrailers(headers)
response.end([data], [encoding])
http.request(options, [callback])
http.get(options, [callback])
agent.maxSockets
agent.sockets
agent.requests
http.globalAgent
request.write(chunk, [encoding])
request.end([data], [encoding])
request.abort()
request.setTimeout(timeout, [callback])
request.setNoDelay([noDelay])
request.setSocketKeepAlive([enable], [initialDelay])
http.IncomingMessage
message.httpVersion
message.headers
message.trailers
message.setTimeout(msecs, callback)
message.method
message.url
message.statusCode
message.socket
# https
https.createServer(options, [requestListener])
https.request(options, callback)
https.get(options, callback)
https.globalAgent
# fs
fs.rename(oldPath, newPath, callback)
fs.renameSync(oldPath, newPath)
fs.ftruncate(fd, len, callback)
fs.ftruncateSync(fd, len)
fs.truncate(path, len, callback)
fs.truncateSync(path, len)
fs.chown(path, uid, gid, callback)
fs.chownSync(path, uid, gid)
fs.fchown(fd, uid, gid, callback)
fs.fchownSync(fd, uid, gid)
fs.lchown(path, uid, gid, callback)
fs.lchownSync(path, uid, gid)
fs.chmod(path, mode, callback)
fs.chmodSync(path, mode)
fs.fchmod(fd, mode, callback)
fs.fchmodSync(fd, mode)
fs.lchmod(path, mode, callback)
fs.lchmodSync(path, mode)
fs.stat(path, callback)
fs.lstat(path, callback)
fs.fstat(fd, callback)
fs.statSync(path)
fs.lstatSync(path)
fs.fstatSync(fd)
fs.link(srcpath, dstpath, callback)
fs.linkSync(srcpath, dstpath)
fs.symlink(srcpath, dstpath, [type], callback)
fs.symlinkSync(srcpath, dstpath, [type])
fs.readlink(path, callback)
fs.readlinkSync(path)
fs.realpath(path, [cache], callback)
fs.realpathSync(path, [cache])
fs.unlink(path, callback)
fs.unlinkSync(path)
fs.rmdir(path, callback)
fs.rmdirSync(path)
fs.mkdir(path, [mode], callback)
fs.mkdirSync(path, [mode])
fs.readdir(path, callback)
fs.readdirSync(path)
fs.close(fd, callback)
fs.closeSync(fd)
fs.open(path, flags, [mode], callback)
fs.openSync(path, flags, [mode])
fs.utimes(path, atime, mtime, callback)
fs.utimesSync(path, atime, mtime)
fs.futimes(fd, atime, mtime, callback)
fs.futimesSync(fd, atime, mtime)
fs.fsync(fd, callback)
fs.fsyncSync(fd)
fs.write(fd, buffer, offset, length, position, callback)
fs.writeSync(fd, buffer, offset, length, position)
fs.read(fd, buffer, offset, length, position, callback)
fs.readSync(fd, buffer, offset, length, position)
fs.readFile(filename, [options], callback)
fs.readFileSync(filename, [options])
fs.writeFile(filename, data, [options], callback)
fs.writeFileSync(filename, data, [options])
fs.appendFile(filename, data, [options], callback)
fs.appendFileSync(filename, data, [options])
fs.watchFile(filename, [options], listener)
fs.unwatchFile(filename, [listener])
fs.watch(filename, [options], [listener])
fs.exists(path, callback)
fs.existsSync(path)
fs.createReadStream(path, [options])
fs.createWriteStream(path, [options])
file.bytesWritten
stats.isFile()
stats.isDirectory()
stats.isBlockDevice()
stats.isCharacterDevice()
stats.isSymbolicLink() (only valid with fs.lstat())
stats.isFIFO()
stats.isSocket()
watcher.close()
# global
global
require()
require.resolve()
require.cache
require.extensions
__filename
__dirname
setTimeout(cb, ms)
clearTimeout(t)
setInterval(cb, ms)
clearInterval(t)
# module
module.exports
module.require(id)
module.id
module.filename
module.loaded
module.parent
module.children
# net
net.createServer([options], [connectionListener])
net.connect(options, [connectionListener])
net.createConnection(options, [connectionListener])
net.connect(port, [host], [connectListener])
net.createConnection(port, [host], [connectListener])
net.connect(path, [connectListener])
net.createConnection(path, [connectListener])
server.listen(port, [host], [backlog], [callback])
server.listen(path, [callback])
server.listen(handle, [callback])
server.close([callback])
server.address()
server.unref()
server.ref()
server.maxConnections
server.connections
server.getConnections(callback)
net.Socket([options])
socket.connect(port, [host], [connectListener])
socket.connect(path, [connectListener])
socket.bufferSize
socket.setEncoding([encoding])
socket.write(data, [encoding], [callback])
socket.end([data], [encoding])
socket.destroy()
socket.pause()
socket.resume()
socket.setTimeout(timeout, [callback])
socket.setNoDelay([noDelay])
socket.setKeepAlive([enable], [initialDelay])
socket.address()
socket.unref()
socket.ref()
socket.remoteAddress
socket.remotePort
socket.localAddress
socket.localPort
socket.bytesRead
socket.bytesWritten
net.isIP(input)
net.isIPv4(input)
net.isIPv6(input)
# path
path.join([path1], [path2], [...])
path.resolve([from ...], to)
path.relative(from, to)
path.dirname(p)
path.basename(p, [ext])
path.extname(p)process.stdout
# punnycode
punycode.decode(string)
punycode.encode(string)
punycode.toUnicode(domain)
punycode.toASCII(domain)
punycode.ucs2
punycode.ucs2.decode(string)
punycode.ucs2.encode(codePoints)
punycode.version
# process
process.stderr
process.stdin
process.argv
process.execPath
process.execArgv
process.abort()
process.chdir(directory)
process.cwd()
process.env
process.exit([code])
process.getgid()
process.setgid(id)
process.getuid()
process.setuid(id)
process.getgroups()
process.setgroups(groups)
process.initgroups(user, extra_group)
process.version
process.versions
process.config
process.kill(pid, [signal])
process.pid
process.title
process.arch
process.platform
process.memoryUsage()
process.nextTick(callback)
process.maxTickDepth
process.umask([mask])
process.uptime()
process.hrtime()util.format(format, [...])
# querystring
querystring.stringify(obj, [sep], [eq])
querystring.parse(str, [sep], [eq], [options])
querystring.escape
querystring.unescape
# readline
readline.createInterface(options)
rl.setPrompt(prompt, length)
rl.prompt([preserveCursor])
rl.question(query, callback)
rl.pause()
rl.resume()
rl.close()
rl.write(data, [key])
readline.cursorTo(stream, x, y)
readline.moveCursor(stream, dx, dy)
readline.clearLine(stream, dir)
readline.clearScreenDown(stream)
# repl
repl.start(options)
# timers
setTimeout(callback, delay, [arg], [...])
clearTimeout(timeoutObject)
setInterval(callback, delay, [arg], [...])
clearInterval(intervalObject)
unref()
ref()
setImmediate(callback, [arg], [...])
clearImmediate(immediateObject)
# tls ssl
tls.getCiphers()
tls.createServer(options, [secureConnectionListener])
tls.SLAB_BUFFER_SIZE
tls.connect(options, [callback])
tls.connect(port, [host], [options], [callback])
tls.createSecurePair([credentials], [isServer], [requestCert], [rejectUnauthorized])
server.listen(port, [host], [callback])
server.close()
server.address()
server.addContext(hostname, credentials)
server.maxConnections
server.connections
cryptoStream.bytesWritten
cleartextStream.authorized
cleartextStream.authorizationError
cleartextStream.getPeerCertificate()
cleartextStream.getCipher()
cleartextStream.address()
cleartextStream.remoteAddress
cleartextStream.remotePort
# tty
tty.isatty(fd)
tty.setRawMode(mode)
rs.isRaw
rs.setRawMode(mode)
ws.columns
ws.rows
# udp
dgram.createSocket(type, [callback])
socket.send(buf, offset, length, port, address, [callback])
socket.bind(port, [address], [callback])
socket.close()
socket.address()
socket.setBroadcast(flag)
socket.setTTL(ttl)
socket.setMulticastTTL(ttl)
socket.setMulticastLoopback(flag)
socket.addMembership(multicastAddress, [multicastInterface])
socket.dropMembership(multicastAddress, [multicastInterface])
socket.unref()
socket.ref()
# util
util.debug(string)
util.error([...])
util.puts([...])
util.print([...])
util.log(string)
util.inspect(object, [options])
util.isArray(object)
util.isRegExp(object)
util.isDate(object)
util.isError(object)
util.pump(readableStream, writableStream, [callback])
util.inherits(constructor, superConstructor)url.parse(urlStr, [parseQueryString], [slashesDenoteHost])
# url
url.format(urlObj)
url.resolve(from, to)os.tmpdir()
# os
os.endianness()
os.hostname()
os.type()
os.platform()
os.arch()
os.release()
os.uptime()
os.loadavg()
os.totalmem()
os.freemem()
os.cpus()
os.networkInterfaces()
os.EOLchild.stdin
# vm
vm.runInThisContext(code, [filename])
vm.runInNewContext(code, [sandbox], [filename])
vm.runInContext(code, context, [filename])
vm.createContext([initSandbox])
vm.createScript(code, [filename])
script.runInThisContext()
script.runInNewContext([sandbox])
# zlib
zlib.createGzip([options])
zlib.createGunzip([options])
zlib.createDeflate([options])
zlib.createInflate([options])
zlib.createDeflateRaw([options])
zlib.createInflateRaw([options])
zlib.createUnzip([options])
zlib.flush(callback)
zlib.reset()
zlib.deflate(buf, callback)
zlib.deflateRaw(buf, callback)
zlib.gzip(buf, callback)
zlib.gunzip(buf, callback)
zlib.inflate(buf, callback)
zlib.inflateRaw(buf, callback)
zlib.unzip(buf, callback)